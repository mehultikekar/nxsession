#!/bin/bash
XAUTHORITY=$HOME/.Xauthority # gnome sets this to something else, we reset it to default for consistency
export XAUTHORITY
script=$(basename ${BASH_SOURCE[0]})

usage="Usage:
  $script start :<display> [-f] [<nx_opts>...]
  $script stop :<display>
  $script list
  $script -h"

exit_msg() {
    echo "$2"
    exit "$1"
}

get_pid() {
    # prints pid and return success if nxagent is running, else return fail
    local pid
    if pid=$(cat "$1"/pid 2> /dev/null); then
        if ps -p "$pid" -o euid,comm | grep -q $(id -u)" nxagent"; then
            echo "$pid"
            return 0
        fi
    fi
    return 1
}

# return success if nxagent is listening on its port
is_active() { fuser -s $(($1+4000))/tcp; }

set_xdpy() {
    if [[ "$1" =~ ^:[0-9]+$ ]]; then
        xdpy="${1#:}"
    else
        echo "Expecting :<display> where <display> is a positive integer. Got '"$1"' instead."
        exit_msg 1 "$usage"
    fi
}

_suspend() {
    local pid=$1
    kill -HUP $pid # HUP suspends and resumes nxagent
    sleep 1
    pkill -HUP -P $pid # this is for the 2nd nxagent started by the 1st one as a watchdog
    sleep 1
}

nxhost-start() {
    local xdpy force nx_opts
    set_xdpy "$1"
    shift
    [ "$1" = -f ] && { force=true; shift; } || force=false
    nx_opts="$@"

    local nx_base="$HOME/.nx/C-$xdpy"

    save_cookie() {
        echo "nodelay=1,cleanup=0,accept=127.0.0.1,taint=1,cookie=$1,$nx_opts" > $nx_base/options
    }

    local pid cookie

    if pid=$(get_pid "$nx_base"); then
        # nxagent is already running. suspend it, save new options and resume it.
        if is_active $xdpy; then
            $force || exit_msg 1 "Did not connect as another connection is active. Try again with -f."
            _suspend $pid
        fi
        cookie=$(xauth nlist :$xdpy | cut -d' ' -f9)
        save_cookie $cookie
        kill -HUP $pid
    else
        # generate a new cookie, start nxagent, run startup script
        is_active $xdpy && exit_msg 1 "Cannot start as NX port is in use. Try with a different <display>."
        fuser -s $((xdpy+6000))/tcp && exit_msg 1 "Cannot start as display :$xdpy is in use. Try with a different <display>."

        rm -rf $nx_base
        mkdir -p $nx_base

        cookie=$(head -c 16 /dev/urandom | hexdump -e '1/1 "%02x"')
        xauth add :$xdpy . $cookie

        save_cookie $cookie
        nxagent -display nx/nx,options=$nx_base/options:$xdpy :$xdpy -R -nolisten tcp -persistent -reset -dpi 96 -forcenx -class TrueColor -auth $XAUTHORITY &> $nx_base/session &
        echo $! > $nx_base/pid

        # wait for nxagent to start listening on its port
        while ! is_active $xdpy; do
            sleep 1
        done

        # run ~/.nx/xstartup, with xterm as fallback
        ( DISPLAY=":$xdpy"
        export DISPLAY
        $HOME/.nx/xstartup &
        if [ $? -ne 0 ] ; then
            [ -r $HOME/.Xresources ] && xrdb -merge $HOME/.Xresources
            xterm &
        fi ) &> $nx_base/x_session
    fi

    echo "Cookie:$cookie" # the cookie is used by nxviewer to secure nxproxy
    sleep 1
}

nxhost-list() {
    cd $HOME/.nx
    local xdpy pid
    for b in $(find -maxdepth 1 -type d -name 'C-*' -print); do
        xdpy=${b#./C-}
        echo -n ":$xdpy is"
        if pid=$(get_pid "$b"); then
            echo -n " running ($pid)"
            if is_active $xdpy; then
                echo " and active."
            else
                echo " but suspended."
            fi
        else
            echo " not running."
        fi
    done
}

nxhost-stop() {
    local xdpy pid
    set_xdpy "$1"

    if pid=$(get_pid "$HOME/.nx/C-$xdpy"); then
        # first suspend to make it stop listening on port then kill
        is_active $xdpy && _suspend $pid
        kill -TERM $pid || kill -9 $pid
        xauth remove :$xdpy
        echo "Terminated :$xdpy"
    else
        exit_msg 1 "No agent found to kill on :$xdpy"
    fi
}

[ $# -eq 0 ] && exit_msg 0 "$usage"
cmd="$1"
shift

case "$cmd" in
    start|stop|suspend|list) nxhost-$cmd "$@";;
    -h) exit_msg 0 "$usage";;
     *) echo "Unknown command $cmd"; exit_msg 1 "$usage";;
esac
