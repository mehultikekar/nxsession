#!/bin/bash
script=$(basename ${BASH_SOURCE[0]})

usage="Usage:
  $script [<host>]:<display> [-f] [<ssh_opts>...]
  $script suspend :<display>
  $script list
  $script list <host> [<ssh_opts>...]
  $script -h"

full_help="Connect to persistent X sessions. Like screen or tmux for X!

"$usage"

The default command is to connect to remote session on <host>. A session will
automatically be created if it doesn't exist. Without a <host>, it will connect
to a local session.

Other commands:
  suspend     Suspend remote session. A suspended session can be resumed later
              from the same or different viewer computer.
  list        List remote sessions connected to.
  list <host> List sessions hosted by <host>.

Options:
  <host>      domain name or IP address of remote host
  <display>   X display number e.g. 1, 2, 3, etc.
  -f          disconnect other viewers
  <ssh_opts>  options to be passed on to ssh"

exit_msg() {
    echo "$2"
    exit "$1"
}

get_pid() {
    # prints pid and return success if nxproxy is running, else return fail
    local pid
    if pid=$(cat "$1"/pid 2> /dev/null); then
        if ps -p "$pid" -o euid,comm | grep -q $(id -u)" nxproxy"; then
            echo "$pid"
            return 0
        fi
    fi
    return 1
}

set_host_xdpy() {
    IFS=: read host xdpy <<< "$1"
    if ! [[ "$xdpy" =~ ^[0-9]+$ ]]; then
        echo "<display> must be a positive integer. Got '"$xdpy"' instead."
        exit_msg 1 "$usage"
    fi
}

nxviewer-connect() {
    local force_opt host xdpy
    set_host_xdpy "$1"
    shift
    [ "$1" = -f ] && { force_opt=-f; shift; }
    # rest are ssh options

    local nx_port=$((xdpy+4000))
    local result
    # start nxagent locally or over ssh and read cookie. then run nxproxy with that cookie
    # if nxagent is remote, also use the ssh connection to create a tunnel for the nx traffic

    if [ -z "$host" ]; then
        echo "Starting/resuming local session"
        unset SSH_CONNECTION # nxhost uses this to set host
        result=$(nxhost start :$xdpy $force_opt link=lan | head -n1)
    else
        echo "Starting/resuming session on $host"
        result=$(ssh -T -f -o ExitOnForwardFailure=yes -L$nx_port:localhost:$nx_port $host "$@" "nxhost start :$xdpy $force_opt link=wan" | head -n1)
    fi

    local tag cookie
    IFS=: read tag cookie <<< "$result"
    [ "$tag" = Cookie ] || exit_msg 1 "Host says: ""$result"

    local nx_base="$HOME/.nx/S-$xdpy"
    rm -rf $nx_base
    mkdir -p $nx_base

    echo "Starting viewer ... session may take a few seconds to start"
    echo "cookie=$cookie" > $nx_base/options

    nxproxy options=$nx_base/options -S localhost:$xdpy &> $nx_base/session &
    echo $! > $nx_base/pid
    echo "$host" > $nx_base/host
}

nxviewer-suspend() {
    local host xdpy
    set_host_xdpy "$1"
    [ -z "$host" ] || { echo "error in :<display> argument $1"; exit_msg 1 "$usage"; }
    # suspending nxproxy is enough, nxagent gets suspended automatically

    if kill -HUP $(get_pid "$HOME/.nx/S-$xdpy") 2> /dev/null; then
        echo "Session :$xdpy suspended"
    else
        exit_msg 1 "Already suspended?"
    fi
}

nxviewer-list() {
    if [ "${1+defined}" ]; then
        ssh "$@" -t "nxhost list"
    else
        cd $HOME/.nx
        local xdpy host pid sesstype
        for b in $(find -maxdepth 1 -type d -name 'S-*' -print); do
            if pid=$(get_pid "$b"); then
                xdpy=${b#./S-}
                host=$(cat "$b"/host 2> /dev/null)
                [ -z "$host" ] && sesstype=Local || sesstype=Remote
                echo "$sesstype session $host:$xdpy (pid $pid) is running."
            fi
        done
    fi
}

[ $# -eq 0 ] && { echo "$usage"; exit_msg 0 "Type $script -h for complete help text."; }
cmd="$1"
shift

case "$cmd" in
    suspend|list) nxviewer-$cmd "$@";;
    -h) exit_msg 0 "$full_help";;
     *) nxviewer-connect "$cmd" "$@";;
esac
