#!/bin/bash

# original name:nxsession
# Simple script to create/resume a remote NX session and connect to it.
#
# NX can be used without specific client software. All that is needed is nxagent and nxproxy.
# The reason that this is more than 5 lines is the suspend/resume logic built in nxagent.
#
# This is replacement for freeNX and any NX client software.
#
# In order to use this you need:
# 1. NX base installed (nxagent, nxproxy, nxcomp) on the (remote) client, and (nxproxy, nxcomp) on the (local) server
# 2. bash, fuser, awk, xauth, hexdump on the (remote) client, bash on the (local) server
#
# freeNX or any NX client is NOT needed.
#
# In the simplest case just run (on the local server):
#   nxsession :<x port> -h <host>
# (if -h is omitted a local session is created/resumed, you later connect to that session through another server)
#
# If -h is present, you'll be requested to log in the remote (client) machine via SSH.
# An NX session is automatically created/resumed on the client. When the session is created .nxstartup is execute
# to start default X applications. When the last X application has ended the remote NX session ends automatically.
# All traffic is tunelled through the SSH connection.
#
# If the requested session is currently used from another machine add -f to force suspension of that other server connection.
#
# An MIT-MAGIC-COOKIE is generated when the session is created and used to secure the remote session.
# In addition that cookie is passed to the (local) server to also secure the nxproxy connection.
#
# To suspend a session from the (local) server use:
#   nxsession :<x port> -s
#
# nxsession can also be used standalone on the remote client to terminate the session (-t)
#
# Author: Lars Hofhansl
#

unset XAUTHORITY # for local sessions
script=`basename $0`

function print_usage() {
cat <<EOF
Usage:
  $script [-ssh <opts>] [-f] [<host>]:<display>
  $script -s :<display>
  $script -t :<display>
  $script -l
  $script -h
EOF
}

function print_help() {
    echo -e "Create/resume NX session and connect to it.\n"
    print_usage
    cat <<EOF

Common options:
  <display> : X display number
  -l : List all hosted and remote sessions
  -h : Show this help

Local-only options:
  <host> : domain name or IP address of remote host. (default: localhost)
  -ssh <opts> : ssh options
  -s : Suspend session by display number
  -f : Force suspend other connections to the requested session

Remote-only options:
  -t : Terminate session by display number
EOF
}

function usage() {
    print_usage
    exit 1
}

function list_sessions(){
    user=$(whoami)
    cd $HOME/.nx
    echo "Remote sessions:"
    for sess in $(ls -d S-* 2>/dev/null); do
        display=${sess#S-}
        host=$(cat $sess/host 2>/dev/null)
        echo -n "  $host:$display "
        if [ -r $sess/pid ]; then
            if pgrep -F $sess/pid -u $user nxproxy &> /dev/null; then
                echo "connected"
            else
                echo "disconnected"
            fi
        else
            echo "status unknown"
        fi
    done

    echo -e "\nHosted sessions:"
    for sess in $(ls -d C-* 2>/dev/null); do
        display=${sess#C-}
        echo -n "  :$display "
        if [ -r $sess/pid ]; then
            if pgrep -F $sess/pid -u $user nxagent &> /dev/null; then
                fuser -s $((display+4000))/tcp && echo "active" || echo "suspended"
            else
                echo "terminated"
            fi
        else
            echo "status unknown"
        fi
    done

    exit 0
}

umask 0077 # make sure created files are not world/group read/writeable

is_host=false
do_suspend=false
do_terminate=false

while [ "${1+defined}" ]; do
    case $1 in
        -s)
            do_suspend=true
            ;;
        -f)
            force_opt=-f
            ;;
        -t)
            do_terminate=true
            is_host=true
            ;;
        -l)
            list_sessions
            ;;
        -h)
            print_help
            exit 0
            ;;
        -ssh)
            shift
            [ "${1+defined}" ] && ssh_opts=$1 || usage
            ;;
        -C)  # internal use only
            is_host=true
            ;;
        -nx) # internal use only
            shift
            [ "${1+defined}" ] && nx_opts=$1 || usage
            ;;
        *)
            [ -n "$host" -o -n "$x_display" ] && usage
            IFS=: read host x_display < <(echo "$1")
            ;;
    esac
    shift
done

[ -z "$x_display" ] && usage
if $is_host; then
    $do_suspend || [ -n "$ssh_opts" -o -n "$host" ] && usage
else
    $do_terminate && usage
    $do_suspend && [ -n "$host" ] && usage
fi

[ -z "$host" ] && host=localhost

nx_port=$(($x_display+4000))
x_port=$(($x_display+6000))

if $is_host; then
    # This runs remotely, invoked from the terminal side to start
    # or resume an X session using nxagent as the X11 server

    nx_base=$HOME/.nx/C-$x_display
    unset DISPLAY

    pid=`cat $nx_base/pid 2>/dev/null`
    if grep -q nxagent /proc/$pid/cmdline 2>/dev/null; then
        # Agent is running
        if fuser -s $nx_port/tcp; then
            # and is active
            if [ -z $force_opt ]; then
                echo "Another connection is active, use -f to force it to suspend."
                exit 1
            fi
            # kill existing session if necessary
            kill -HUP $pid # suspend agent
            sleep 1
            # kill the watchdog - if necessary
            kill -HUP `ps --ppid $pid -o pid --no-headers` 2>/dev/null
            sleep 1
        fi

        if $do_terminate; then
            # we guaranteed that the session is suspended, it is safe to kill it
            # TERM should do it.. use -9 just in case
            kill -TERM $pid || kill -9 $pid
            xauth remove ":$x_display"
            echo "Terminated :$x_display"
            exit 0
        fi

        # Agent is inactive... Resume
        cookie=`xauth nextract - :$x_display | awk '{print $9}'`
        echo "nodelay=1,cleanup=0,accept=127.0.0.1,taint=1,cookie=$cookie,$nx_opts" > $nx_base/options
        kill -HUP $pid
    else
        # Start Agent

        if $do_terminate; then
            echo "No agent running?"
            exit 1
        fi

        if fuser -s $nx_port/tcp; then
            echo "Port $nx_port is in use"
            exit 1
        fi

        if fuser -s $x_port/tcp; then
            echo "Display :$x_display is in use"
            exit 1
        fi

        # clear out existing Dir
        rm -rf $nx_base
        mkdir -p $nx_base

        # secure the remote X session (generate MIT-MAGIC-COOKIE)
        cookie=`head -c 16 /dev/urandom  | hexdump -e '1/1 "%02x"'`
        xauth add :$x_display . $cookie

        # run agent
        echo "nodelay=1,cleanup=0,accept=127.0.0.1,taint=1,cookie=$cookie,$nx_opts" > $nx_base/options
        nxagent -display nx/nx,options=$nx_base/options:$x_display :$x_display -R -nolisten tcp -persistent -reset -dpi 96 -forcenx -class TrueColor -auth $HOME/.Xauthority &> $nx_base/session &
        echo $! > $nx_base/pid
        # wait until nxagent is ready
        while ! fuser -s $nx_port/tcp; do
            sleep 1
        done
        # run startup script
        startup=$HOME/.nxstartup
        [ -x $startup ] || startup=xterm
        env DISPLAY=:$x_display $startup &> $nx_base/x_session &
    fi
    # send $cookie
    echo "Cookie:$cookie" # write a line (the client will wait for this)
    sleep 1

else
    # this is run locally
    nx_base=$HOME/.nx/S-$x_display

    pid=`cat $nx_base/pid 2>/dev/null`

    if $do_suspend; then
        if kill -HUP $pid 2>/dev/null; then
            echo "Suspending session :$x_display"
        else
            echo "Already suspended?"
        fi
        exit 0
    fi

    if [ "$host" = localhost ]; then
        echo "Starting/resuming local session"
        result=$($0 :$x_display -nx link=lan -C $force_opt | head -n1)
    else
        echo "Starting/resuming session on $host"
        # | head -n1 waits for the first line from the remote machine
        result=$(ssh -T -f -o ExitOnForwardFailure=yes -L$nx_port:localhost:$nx_port $host $ssh_opts "$script :$x_display -nx link=wan -C $force_opt" | head -n1)
    fi

    if [ "${result:0:6}" != "Cookie" ]; then
        echo "Client: $result"
        exit 1;
    fi

    cookie=${result:7}

    # clear existing dir
    rm -rf $nx_base
    mkdir -p $nx_base

    echo "Running nxproxy... Establishing connection may take a few seconds"
    echo "cookie=$cookie" > $nx_base/options
    nxproxy options=$nx_base/options -S localhost:$x_display &> $nx_base/session &
    echo $! > $nx_base/pid
    echo $host > $nx_base/host
fi
